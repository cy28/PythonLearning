# 赋值就是对象的引用，相当于两个指针都指向同一块地址
"""
问题：对一个列表的修改，导致了两个列表都被修改

list1 = [12, 34, 56, 6678]
list2 = list1   # 实际上变量的名字表示的是指针
print(list1)    # [12, 34, 56, 6678]
print(list2)    # [12, 34, 56, 6678]

list2[2] = 78
print(list1)  # [12, 34, 78, 6678]
print(list2)  # [12, 34, 78, 6678]

"""

# 为解决上述问题，采用了浅拷贝的方式  引入copy模块

# 浅拷贝解决的是一维列表的方式，
# 浅拷贝，实际上是将一维列表复制一份，放在新的内存空间，新的变量名指向新的复制的内存空间

import copy
list3 = [5456, 789, [23, 456, 1], 2, 765]
list4 = list3.copy()            # .copy是内置与python中的对象方法 效果与浅拷贝一致
list5 = copy.copy(list3)        # 浅拷贝  一维指针指向不同的一维列表，但是二维指针指向同一个二维列表
list6 = copy.deepcopy(list3)    # 深拷贝  一维指针指向不同的一维列表，同时二维指针指向不同的二维列表

# 针对list3中一维元素修改，三种拷贝效果一致，均不会受到影响，因为三个一维部分都指向一份不同的拷贝区域
list3[0] = 3
print(list3)  # [3, 789, [23, 456, 1], 2, 765]
print(list4)  # [5456, 789, [23, 456, 1], 2, 765]
print(list5)  # [5456, 789, [23, 456, 1], 2, 765]
print(list6)  # [5456, 789, [23, 456, 1], 2, 765]

# 针对list3中二维元素修改，效果不一致，浅拷贝也会被修改，而深拷贝不会被修改，因为深拷贝的二维部分指针指向的是不同的区域(一份拷贝的区域)
list3[2][1] = 0
print(list3)  # [3, 789, [23, 0, 1], 2, 765]
print(list4)  # [5456, 789, [23, 0, 1], 2, 765]     浅复制 二维部分同样被修改
print(list5)  # [5456, 789, [23, 0, 1], 2, 765]     浅复制 二维部分同样被修改
print(list6)  # [5456, 789, [23, 456, 1], 2, 765]   深复制 二维部分没有发生修改






















