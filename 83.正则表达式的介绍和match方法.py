# 正则表达式的介绍：
"""
Regular"这个词在英语中的含义是“规则的、有规律的、定期的”，在计算机科学中，它指的是一类字符串的描述语言，即正则表达式。
正则表达式可以被看作是一种规则或者模式，它可以用来匹配或搜索文本中的特定字符串（符合某个模式的文本），进行替换、提取等操作。

在Python中，re是正则表达式（regular expression）库的名称。re是英文单词“regular expression”的缩写。
正则表达式是一种字符串匹配的工具，可以用于对文本进行搜索、替换和分割等操作。
re库提供了一组用于处理字符串的函数和方法，这些函数和方法使用正则表达式来完成字符串匹配、查找、替换等操作。因此，re库的名称反映了它的功能和用途。

"""

import re

# \d 表示0-9之间的任意数字
# + 表示可以出现一次或者多次
# 正则表达式查找常用的的函数：re.match / re.search

# 1. re.match() 匹配字符串是否以指定的正则内容开头，匹配成功返回对象，匹配失败返回None

"""
re.match函数的参数包括：

1. pattern：要匹配的正则表达式模式。
2. string：要匹配的字符串。
3. flags：可选参数，指定匹配时的选项，如是否忽略大小写、是否多行匹配等。默认值为0，表示不使用任何选项。

"""

# 例如，使用re.match函数匹配一个字符串中的电话号码：
import re

pattern = r'\d{3}-\d{3}-\d{4}'  # 匹配xxx-xxx-xxxx格式的电话号码
string = '123-456-7890'
match_obj = re.match(pattern, string)
if match_obj:
    print('匹配成功！电话号码为：', match_obj.group())
else:
    print('匹配失败！')

"""
这个正则表达式模式用于匹配电话号码，其中：

1. \d 表示匹配任意一个数字字符。
2. {3} 表示前面的表达式\d需要匹配三次，即需要匹配三个数字字符。
3. - 表示匹配一个连字符。
4. \d{3}-\d{3}-\d{4} 表示需要匹配三个数字字符、一个连字符、三个数字字符、一个连字符、四个数字字符的字符串。
5. + 表示可以出现一次或者多次

因此，这个正则表达式可以匹配如下格式的电话号码：
123-456-7890
111-222-3333
999-888-7777
r前缀表示这个字符串是一个原始字符串，这样可以避免在字符串中使用反斜杠时出现转义字符的问题。
因为在正则表达式中使用反斜杠\是非常普遍的，所以使用原始字符串来表示正则表达式模式可以让代码更加清晰易懂。

"""














