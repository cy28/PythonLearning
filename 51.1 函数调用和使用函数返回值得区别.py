# 函数调用指的是在代码中调用一个函数，以便执行该函数中的代码。这可以通过使用函数的名称，后跟一对括号来完成。


# 定义一个函数，它将两个列表中的数字相加并返回结果
def add_list_numbers(list1, list2):
    result = 0
    for num in list1:
        result += num
    for num in list2:
        result += num
    return result

# 调用 add_list_numbers 函数，并将结果存储在变量 sum 中
sum = add_list_numbers([1, 2, 3], [4, 5, 6])

# 使用函数返回值将结果打印到控制台
print(sum)


"""
在这个例子中，我们定义了一个名为 add_list_numbers 的函数，该函数将两个列表中的数字相加并返回结果。

我们使用 for 循环遍历列表中的每个数字，并将它们相加起来，然后将结果返回。

然后，我们在代码的另一个位置调用 add_list_numbers 函数，并将两个列表 [1, 2, 3] 和 [4, 5, 6] 作为参数传递给它，将返回的结果存储在变量 sum 中。

最后，我们使用 print 函数将 sum 的值打印到控制台。

这个例子中的区别在于，我们在第一次出现 add_list_numbers 的地方调用了该函数，并将返回的结果存储在变量 sum 中。

然后，在代码的另一个位置，我们使用 sum 的值将结果打印到控制台。

这展示了函数调用和使用函数返回值之间的区别：函数调用执行函数中的代码，并返回结果，而使用函数返回值使用函数返回的结果来执行其他操作。

"""

# 如果在函数中没有使用 return 语句返回值，
# 那么 sum 变量将不会存储任何值，因为函数没有返回任何值。
# 在这种情况下，sum 变量将保留其初始值（如果已经被初始化），否则将不存在。以下是一个示例：

# 定义一个函数，它将两个数字相加
def add_numbers(x, y):
    x + y

# 调用 add_numbers 函数
sum = add_numbers(2, 3)  # 这里并没有得到返回值

# 尝试打印 sum 变量
print(sum)

"""
在这个例子中，我们定义了一个名为 add_numbers 的函数，该函数将两个数字相加，但是在函数中没有使用 return 语句返回结果。

我们在代码的另一个位置调用 add_numbers 函数，并将参数 2 和 3 传递给它，但是我们没有存储或使用函数的返回值。

最后，我们尝试打印 sum 变量，但是在这个例子中，sum 变量未被初始化或赋值，因此它不存在。

在这种情况下，Python 将引发一个 NameError 异常，因为它无法找到 sum 变量的定义。

因此，如果您想在调用函数后使用其结果，请确保函数返回一个值，并且在调用函数时使用变量来存储结果。

如果您没有使用 return 语句返回结果，则函数将无法返回任何值，因此调用函数的结果也将为空
"""

























